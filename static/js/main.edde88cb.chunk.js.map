{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","field","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","this","props","children","Component","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredrobots","filter","robot","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCNSC,EAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACC,yBAAKC,UAAU,+DACd,yBAAKC,IAAI,GAAGC,IAAG,+BAA0BL,KACzC,4BAAKC,GACL,2BAAIC,KCaQI,EAjBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAClB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCFVU,G,MARG,SAAC,GAAyB,EAAxBC,MAAyB,IAAlBC,EAAiB,EAAjBA,aACvB,OACI,yBAAKX,UAAU,aACX,2BAAOY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCMxDI,G,MAVf,uKAEQ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEC,KAAKC,MAAMC,SADhB,SAHZ,GAA4BC,cC2CbC,E,kDArCd,aAAc,IAAD,8BACZ,gBAcDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEjB,MAAOgB,EAAME,OAAOC,SAdpC,EAAKC,MAAQ,CACZ1B,OAAQ,GACRM,MAAQ,IAJG,E,gEAOO,IAAD,OAClBqB,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKR,SAAS,EAAKG,MAAM1B,OAAO+B,Q,+BAMzB,IAAD,OACDC,EAAiBhB,KAAKU,MAAM1B,OAAOiC,QAAO,SAAAC,GAC/C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKV,MAAMpB,MAAM6B,kBAE3D,OACC,6BACC,8CACA,kBAAC,EAAD,CAAW5B,aAAcS,KAAKK,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUrB,OAAQgC,KAEnB,yBAAKpC,UAAU,UACd,sCAAW,mDAAX,4B,GA/BauB,aCClBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,yBAAK3C,UAAU,MACd,kBAAC,EAAD,QAID4C,SAASC,eAAe,SNoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.edde88cb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-blue shadow-5 w-auto-m dib ma2 pa2 bw2 grow br4\">\r\n\t\t\t<img alt=\"\" src={`https://robohash.org/${id}`} />\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\t\temail={robots[i].email} />\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default CardList;","import React from 'react';\r\nimport './searchbox.css'\r\n\r\nconst SearchBox = ({field, searchChange}) =>{\r\n    return(\r\n        <div className=\"searchbox\">\r\n            <input type=\"search\" placeholder=\"Search robots\" onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react'\r\n\r\nexport class Scroll extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{ overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\r\n                {this.props.children};\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from \"./SearchBox\";\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tfield : ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response =>{\r\n\t\t\treturn response.json();\r\n\t\t} )\r\n\t\t.then(users =>{\r\n\t\t\tthis.setState(this.state.robots=users);\r\n\t\t})\r\n\t}\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ field: event.target.value })\r\n\t}\r\n\trender(){\r\n\t\tconst filteredrobots = this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.field.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Robots friends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredrobots} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t<div className=\"footer\">\r\n\t\t\t\t\t<p>Made by <span>Abdelwahd Laatiba</span> hope you like it.</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) \r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <div className=\"tc\">\n  \t<App />\n  </div>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}